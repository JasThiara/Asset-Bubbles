'''
Created on May 4, 2014

@author: clinton
'''
import unittest


class Test(unittest.TestCase):
    T=23160
    S=[533.75, 533.7, 533.55, 531.54, 532.215, 532.66, 533.21, 533.5467, 532.67, 532.844, 532.685, 532.47, 531.91, 531.11, 530.5882, 531.21, 530.315, 530.36, 530.28, 529.41, 528.71, 528.62, 529.13, 528.989, 528.77, 528.34, 528.16, 528.71, 527.25, 529.17, 530.19, 529.85, 529.5, 529.95, 530.0, 528.78, 529.86, 529.45, 530.75, 531.26, 531.15, 531.043, 530.37, 530.5004, 530.58, 530.8, 530.54, 529.8325, 530.25, 530.17, 530.27, 530.45, 530.28, 530.35, 530.32, 530.3, 530.24, 529.95, 529.44, 529.64, 529.44, 529.835, 529.111, 528.69, 529.13, 529.53, 529.16, 529.38, 529.94, 529.55, 529.22, 529.55, 528.5, 528.42, 528.11, 528.472, 528.19, 527.95, 527.01, 527.38, 526.0, 526.995, 527.18, 527.22, 527.1099, 527.31, 527.25, 528.35, 527.6375, 527.5, 527.37, 527.07, 527.68, 528.601, 528.46, 528.52, 528.5, 528.88, 528.82, 529.08, 528.77, 528.65, 528.79, 529.17, 528.16, 528.02, 528.078, 528.13, 527.9601, 528.35, 528.8, 528.57, 528.48, 528.08, 528.6, 528.172, 527.66, 527.71, 528.3, 528.44, 528.3999, 529.03, 529.5, 529.686, 529.82, 530.54, 530.01, 529.835, 529.835, 529.61, 529.48, 529.29, 529.59, 529.575, 530.2, 530.27, 530.78, 530.88, 530.2004, 530.77, 530.8, 530.94, 530.88, 530.54, 530.88, 531.13, 531.0, 530.59, 531.3, 530.65, 530.54, 530.41, 530.74, 530.2, 530.1, 529.84, 529.57, 529.64, 529.27, 529.34, 529.0, 528.92, 529.05, 528.89, 528.88, 528.99, 528.75, 528.8, 528.61, 528.58, 528.62, 528.6504, 529.06, 529.01, 529.01, 529.01, 529.01, 528.72, 529.138, 528.77, 528.85, 528.98, 529.2, 529.22, 529.432, 529.4, 529.67, 529.53, 529.71, 529.84, 529.85, 530.01, 529.845, 529.79, 529.96, 529.81, 529.93, 529.95, 529.74, 529.6, 529.6136, 529.57, 529.72, 529.8863, 529.52, 529.19, 529.15, 529.1, 529.38, 529.1001, 529.1, 529.43, 529.5236, 529.13, 528.874, 528.93, 528.96, 528.87, 528.8, 529.18, 529.255, 528.846, 529.14, 529.0, 528.8004, 528.87, 528.9, 529.015, 529.01, 529.222, 529.155, 529.076, 529.26, 528.685, 528.5925, 528.73, 528.97, 529.06, 528.95, 528.98, 528.91, 528.99, 528.8625, 528.95, 528.95, 529.0512, 528.996, 529.02, 529.0275, 528.89, 529.36, 529.0, 528.92, 529.34, 529.12, 529.24, 529.38, 529.295, 529.03, 529.25, 529.03, 529.075, 529.1925, 529.055, 528.76, 528.76, 528.23, 528.428, 528.22, 528.41, 528.57, 528.585, 528.3, 528.23, 528.15, 528.11, 528.2, 528.47, 528.16, 528.37, 528.59, 528.87, 529.09, 529.42, 529.372, 529.2425, 529.19, 529.14, 529.06, 528.634, 528.53, 528.765, 528.82, 528.5, 528.54, 528.4, 528.69, 528.7, 528.43, 528.99, 529.31, 529.55, 529.16, 528.89, 529.23, 529.29, 529.38, 529.49, 529.405, 529.405, 529.37, 529.26, 529.13, 529.01, 529.125, 528.93, 529.055, 529.26, 529.25, 529.3, 529.295, 529.26, 529.36, 529.21, 529.31, 529.395, 529.86, 529.755, 529.65, 529.73, 529.69, 529.77, 529.86, 529.98, 529.98, 530.36, 530.1501, 530.185, 530.22, 530.092, 530.15, 530.0, 530.13, 530.07, 530.26, 530.26, 530.36, 530.395, 530.38, 530.28, 530.2, 530.192, 530.03, 530.29, 530.16, 530.09, 530.4, 530.04, 529.74, 529.64, 529.5025, 529.55, 529.4, 529.425, 529.47, 529.65, 529.385, 529.39, 529.115, 529.44, 529.35, 529.02, 528.8, 528.86, 528.73, 528.7, 528.81, 528.63, 528.74, 528.71, 528.83, 528.92, 528.85, 528.67, 528.51, 527.93]
    x=535.579623567
    n=386
    h_n=0.137342273358
    def Indicator_function(self,condition):
        """
        function Indicator_function
        input:
             condition
        output:
              0 or 1
              
        Description : (sigma i =1,n-1 1_{|S(s)-x)| < h_n})
        """
        return condition
    def Sublocal_Time(self,T,S,x,n,h_n):
        """
        funtion: Sublocal_time
        input:T is time period 
              1) stock price (s(t1).......s(tn))= S
              2) x values in [0,infinity)
              3) n , h_n
        outout L_T^n(x)
        
        Description: L_T^n(x) = (T/ 2nh_n) sigma i =1,n 1_{|s_t(i)-x)| < h_n}
    
        """
        sum = 0.0
        scalar = T/(2.0*n*h_n)
        for i in range(len(S)):
            Sti = S[i]
            absoluteValue = abs(Sti-x)
            indicatorValue = self.Indicator_function(absoluteValue<h_n)
            sum = sum+indicatorValue
        return scalar*sum
    def setUp(self):
        pass


    def tearDown(self):
        pass


    def testSublocal(self):
        G = self.Sublocal_Time(self.T,self.S,self.x,self.n,self.h_n)
        self.assertAlmostEquals(G, 0.0, 10, 'approximately zero', .01)


if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()